definitions:
  dao.ReqAddUser:
    properties:
      avatar:
        type: string
      createBy:
        type: string
      createdAt:
        type: string
      dataScope:
        type: string
      deletedAt:
        type: string
      email:
        type: string
      nickname:
        type: string
      params:
        type: string
      password:
        type: string
      phone:
        type: string
      remark:
        type: string
      roleId:
        type: integer
      salt:
        type: string
      sex:
        type: string
      status:
        type: string
      updateBy:
        type: string
      updatedAt:
        type: string
      userId:
        type: integer
      username:
        type: string
    required:
    - nickname
    - password
    - roleId
    - username
    type: object
  dao.ReqLoginUser:
    properties:
      password:
        example: "123"
        type: string
      username:
        example: admin
        type: string
    required:
    - password
    - username
    type: object
  dao.ReqUpdateUser:
    properties:
      avatar:
        type: string
      createBy:
        type: string
      createdAt:
        type: string
      dataScope:
        type: string
      deletedAt:
        type: string
      email:
        type: string
      nickname:
        type: string
      params:
        type: string
      password:
        type: string
      phone:
        type: string
      remark:
        type: string
      roleId:
        type: integer
      salt:
        type: string
      sex:
        type: string
      status:
        type: string
      updateBy:
        type: string
      updatedAt:
        type: string
      userId:
        type: integer
      username:
        type: string
    type: object
  model.Menu:
    properties:
      action:
        type: string
      breadcrumb:
        type: string
      component:
        type: string
      createBy:
        type: string
      createdAt:
        type: string
      deletedAt:
        type: string
      icon:
        type: string
      is_select:
        type: boolean
      isFrame:
        type: string
      menuId:
        type: integer
      menuType:
        type: string
      name:
        type: string
      noCache:
        type: boolean
      params:
        type: string
      parentId:
        type: integer
      path:
        type: string
      paths:
        type: string
      permission:
        type: string
      routes:
        items:
          $ref: '#/definitions/model.Menu'
        type: array
      sort:
        type: integer
      title:
        type: string
      updateBy:
        type: string
      updatedAt:
        type: string
      visible:
        type: string
    required:
    - menuType
    - sort
    - title
    type: object
  model.Role:
    properties:
      createBy:
        type: string
      createdAt:
        type: string
      dataScope:
        type: string
      deletedAt:
        type: string
      menuIds:
        items:
          type: integer
        type: array
      params:
        type: string
      remark:
        type: string
      roleId:
        type: integer
      roleKey:
        type: string
      roleName:
        type: string
      roleSort:
        type: integer
      status:
        type: string
      updateBy:
        type: string
      updatedAt:
        type: string
    required:
    - menuIds
    - roleKey
    - roleName
    - roleSort
    - status
    type: object
  response.Page:
    properties:
      count:
        type: integer
      list:
        type: object
      pageIndex:
        type: integer
      pageSize:
        type: integer
    type: object
  response.PageResponse:
    properties:
      code:
        example: 200
        type: integer
      data:
        $ref: '#/definitions/response.Page'
        type: object
      msg:
        type: string
    type: object
  response.Res:
    properties:
      code:
        type: integer
      data:
        type: object
      error:
        type: string
      msg:
        type: string
    type: object
info:
  contact: {}
  license: {}
paths:
  /api/v1/getinfo:
    get:
      description: 获取JSON
      responses:
        "200":
          description: '{"code": -1, "message": "抱歉未找到相关信息"}'
          schema:
            type: string
      summary: 获取权限信息
      tags:
      - Info
  /api/v1/login:
    post:
      parameters:
      - description: body
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/dao.ReqLoginUser'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Res'
      summary: 用户登录
      tags:
      - User
  /api/v1/logout:
    post:
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Res'
      summary: 注销登录
      tags:
      - User
  /api/v1/menu:
    post:
      consumes:
      - application/json
      description: 获取JSON
      parameters:
      - description: data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.Menu'
      responses:
        "200":
          description: '{"code": -1, "message": "添加失败"}'
          schema:
            type: string
      summary: 创建菜单
      tags:
      - Menu
    put:
      consumes:
      - application/json
      description: 获取JSON
      parameters:
      - description: body
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.Menu'
      responses:
        "200":
          description: '{"code": -1, "message": "修改失败"}'
          schema:
            type: string
      summary: 修改菜单
      tags:
      - Menu
  /api/v1/menu/{menuId}:
    delete:
      description: 删除数据
      parameters:
      - description: menuId
        in: path
        name: menuId
        required: true
        type: string
      responses:
        "200":
          description: '{"code": -1, "message": "删除失败"}'
          schema:
            type: string
      summary: 删除菜单
      tags:
      - Menu
    get:
      description: 获取JSON
      parameters:
      - description: menuId
        in: path
        name: menuId
        type: string
      responses:
        "200":
          description: '{"code": -1, "message": "抱歉未找到相关信息"}'
          schema:
            type: string
      summary: 获取Menu数据
      tags:
      - Menu
  /api/v1/menulist:
    get:
      description: 获取JSON
      parameters:
      - description: visible
        in: query
        name: visible
        type: string
      - description: title
        in: query
        name: title
        type: string
      responses:
        "200":
          description: '{"code": -1, "message": "抱歉未找到相关信息"}'
          schema:
            type: string
      summary: Menu列表数据
      tags:
      - Menu
  /api/v1/menurole:
    get:
      description: 获取JSON
      responses:
        "200":
          description: '{"code": -1, "message": "抱歉未找到相关信息"}'
          schema:
            type: string
      summary: 根据角色名称获取菜单列表数据（左菜单使用）
      tags:
      - Menu
  /api/v1/query:
    get:
      description: 查询登录状态，并返回user
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Res'
      summary: 查询登录状态，并返回user
      tags:
      - User
  /api/v1/role:
    post:
      consumes:
      - application/json
      description: 获取JSON
      parameters:
      - description: data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.Role'
      responses:
        "200":
          description: '{"code": -1, "message": "添加失败"}'
          schema:
            type: string
      summary: 创建角色
      tags:
      - Role
    put:
      consumes:
      - application/json
      description: 获取JSON
      parameters:
      - description: body
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.Role'
      responses:
        "200":
          description: '{"code": -1, "message": "修改失败"}'
          schema:
            type: string
      summary: 修改用户角色
      tags:
      - Role
  /api/v1/role/{roleId}:
    delete:
      description: 删除数据
      parameters:
      - description: roleId
        in: path
        name: roleId
        required: true
        type: string
      responses:
        "200":
          description: '{"code": -1, "message": "删除失败"}'
          schema:
            type: string
      summary: 删除用户角色
      tags:
      - Role
    get:
      description: 获取JSON
      parameters:
      - description: roleId
        in: path
        name: roleId
        type: string
      responses:
        "200":
          description: '{"code": -1, "message": "抱歉未找到相关信息"}'
          schema:
            type: string
      summary: 获取Role数据
      tags:
      - Role
  /api/v1/rolelist:
    get:
      description: Get JSON
      parameters:
      - description: roleName
        in: query
        name: roleName
        type: string
      - description: status
        in: query
        name: status
        type: string
      - description: rolekey
        in: query
        name: rolekey
        type: string
      - description: 页条数
        in: query
        name: pageSize
        type: integer
      - description: 页码
        in: query
        name: pageIndex
        type: integer
      responses:
        "200":
          description: '{"code": 200, "data": [...]}'
          schema:
            $ref: '#/definitions/response.PageResponse'
      summary: 角色列表数据
      tags:
      - Role
  /api/v1/user:
    post:
      consumes:
      - application/json
      description: 获取JSON
      parameters:
      - description: 用户数据
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/dao.ReqAddUser'
      responses:
        "200":
          description: '{"code": -1, "message": "添加失败"}'
          schema:
            type: string
      summary: 创建用户
      tags:
      - User
    put:
      consumes:
      - application/json
      description: 获取JSON
      parameters:
      - description: body
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/dao.ReqUpdateUser'
      responses:
        "200":
          description: '{"code": -1, "message": "修改失败"}'
          schema:
            type: string
      summary: 修改用户数据
      tags:
      - User
  /api/v1/user/{userId}:
    delete:
      description: 删除数据
      parameters:
      - description: userId
        in: path
        name: userId
        required: true
        type: integer
      responses:
        "200":
          description: '{"code": -1, "message": "删除失败"}'
          schema:
            type: string
      summary: 删除用户数据
      tags:
      - User
    get:
      description: 获取JSON
      parameters:
      - description: userId
        in: path
        name: userId
        required: true
        type: integer
      responses:
        "200":
          description: '{"code": -1, "message": "抱歉未找到相关信息"}'
          schema:
            type: string
      summary: 获取用户
      tags:
      - User
  /api/v1/user/profileAvatar:
    post:
      consumes:
      - multipart/form-data
      description: 获取JSON
      parameters:
      - description: file
        in: formData
        name: file
        required: true
        type: file
      responses:
        "200":
          description: '{"code": -1, "message": "添加失败"}'
          schema:
            type: string
      summary: 修改头像
      tags:
      - User
  /api/v1/userlist:
    get:
      description: 获取JSON
      parameters:
      - description: username
        in: query
        name: username
        type: string
      - description: phone
        in: query
        name: phone
        type: string
      - description: status
        in: query
        name: status
        type: string
      - description: 页条数
        in: query
        name: pageSize
        type: integer
      - description: 页码
        in: query
        name: pageIndex
        type: integer
      responses:
        "200":
          description: '{"code": -1, "message": "抱歉未找到相关信息"}'
          schema:
            type: string
      summary: 列表数据
      tags:
      - User
swagger: "2.0"
